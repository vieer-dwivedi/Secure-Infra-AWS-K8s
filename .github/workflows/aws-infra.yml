name: Infrastructure deployment

on:
  workflow_dispatch:
    inputs:
      resource_prefix:
        description: 'Prefix for resource name'
        required: true
        default: '3tierdeployment'
      environment:
        description: 'Environment name'
        required: true
        default: 'dev'
      deployment_type:
        description: 'Deployment Type (Temporary)'
        required: true
        type: choice
        options:
          - Apply
          - Destroy
        default: Apply

permissions:
  id-token: write
  contents: read

env:
  resource_prefix: ${{ github.event.inputs.resource_prefix }}
  environment: ${{ github.event.inputs.environment }}
  deployment_type: ${{ github.event.inputs.deployment_type }}

jobs:
  build:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code 
        uses: actions/checkout@v3

  deploy:
    name: 'Terragrunt Init/Plan/Apply'
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment }}
    env:
      AWS_PRIMARY_REGION: ${{ vars.AWS_PRIMARY_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_PRIMARY_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
          role-session-name: GitHubActionsSession

      - name: Setup Terraform v1.8.4
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.8.4
          terraform_wrapper: false

      - name: Setup Terraform version
        run: terraform --version

      - name: Setup Terraform wrapper path
        run: which terraform

      - name: Setup Terragrunt version 0.58.13
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: 0.58.13
      
      # - name: Get AWS Account ID
      #   id: aws-account-id
      #   run: |
      #     ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      #     echo "ACCOUNT_ID=${ACCOUNT_ID}" >> $GITHUB_ENV
      
      - name: Make preprocess-config.sh executable
        run: chmod +x ./scripts/preprocess-config.sh
      
      - name: Preprocess config.yml for ${{ env.environment }}
        env:
          RESOURCE_PREFIX: ${{ env.resource_prefix }}
          ENVIRONMENT: ${{ env.environment }}
          ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
        run: |
          export RESOURCE_PREFIX=${{ env.RESOURCE_PREFIX }}
          export ENVIRONMENT=${{ env.ENVIRONMENT }}
          export ACCOUNT_ID=${{ secrets.ACCOUNT_ID }}
          ./scripts/preprocess-config.sh ./infra/config-${{ env.environment }}.yml.template ./infra/environments/${{ env.ENVIRONMENT }}/config.yml

        #   TEMPLATE_FILE=./infra/config-${{ env.ENVIRONMENT }}.yml.template
        # CONFIG_FILE=./infra/environments/${{ env.ENVIRONMENT }}/config.yml
        # ./scripts/preprocess-config.sh $TEMPLATE_FILE $CONFIG_FILE

      # # **********Debug Steps***********Uncomment when required*********
      - name: List files in environments directory
        run: ls -R ./infra/environments
        
      # Temporary
      - name: Verify config.yml
        env:
            ENVIRONMENT: ${{ env.environment }}
        run: |
          echo "Contents of config.yml:"
          cat ./infra/environments/${{ env.ENVIRONMENT }}/config.yml
          echo "Location of config.yml:"
          ls -l ./infra/environments/${{ env.ENVIRONMENT }}/config.yml

      # Temporary
      - name: Debug CloudFront module directory
        env:
              ENVIRONMENT: ${{ env.environment }}
        run: |
          echo "Contents of CloudFront module directory:"
          ls -R ./infra/environments/${{ env.ENVIRONMENT }}/cloudfront
          echo "Current working directory:"
          pwd
      
      # Temporary
      - name: Make destroy_resources.sh executable
        run: chmod +x ./scripts/destroy-resources.sh
      
      # Temporary
      - name: Determine Action
        id: action
        env:
          deployment_type: ${{ env.deployment_type }}
        run: |
          if [ "${{ env.deployment_type }}" == "Apply" ]; then
            echo "action=apply" >> $GITHUB_ENV
            echo "::set-output name=action_name::Terragrunt Apply"
          elif [ "${{ env.deployment_type }}" == "Destroy" ]; then
            echo "action=destroy" >> $GITHUB_ENV
            echo "::set-output name=action_name::Terragrunt Destroy"
          else
            echo "Invalid deployment type" && exit 1
          fi

      # # Temporary
      # - name: Destroy Resources (if Destroy)
      #   if: env.action == 'destroy'
      #   run: |
      #     ./scripts/destroy-resources.sh ${{ env.resource_prefix }} ${{ env.environment }}

      # Temporary
      - name: ${{ steps.action.outputs.action_name }}
        env:
          RESOURCE_PREFIX: ${{ env.resource_prefix }}
          ENVIRONMENT: ${{ env.environment }}
          ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
        run: |
          echo $RESOURCE_PREFIX
          echo $ENVIRONMENT
          echo $ACCOUNT_ID
          cd ./infra/environments/${{ env.environment }}
          if [ "${{ env.action }}" == "apply" ]; then
            terragrunt run-all apply --terragrunt-non-interactive
          elif [ "${{ env.action }}" == "destroy" ]; then
            terragrunt run-all destroy --terragrunt-non-interactive
          fi

      # - name: Terragrunt Apply
      #   env:
      #     RESOURCE_PREFIX: ${{ env.resource_prefix }}
      #     ENVIRONMENT: ${{ env.environment }}
      #     ACCOUNT_ID: ${{ env.ACCOUNT_ID }}
      #   run: |
      #     echo $RESOURCE_PREFIX
      #     echo $ENVIRONMENT
      #     echo $ACCOUNT_ID
      #     cd ./infra/environments/${{ env.environment }}
      #     terragrunt run-all apply --terragrunt-non-interactive

      # # **********Debug Steps***********Uncomment when required*********
      # - name: List files in environments directory
      #   run: ls -R ./infra/environments
